/// An extension for [bool].
extension BoolExtension on bool {
  /// Returns value generated by [func] if condition is true.
  T? ifTrue<T>(T Function() func, [T Function()? fallbackFunc]) {
    if (this == true) {
      return func.call();
    }
    return fallbackFunc?.call();
  }

  /// Returns value generated by [func] if condition is false.
  T? ifFalse<T>(T Function() func, [T Function()? fallbackFunc]) {
    if (this == false) {
      return func.call();
    }
    return fallbackFunc?.call();
  }

  /// Returns value1 generated by [ifFunc] if condition is true, otherwise returns value2 generated by [elseFunc].
  T ifElse<T>(T Function() ifFunc, T Function() elseFunc) {
    if (this == true) {
      return ifFunc.call();
    }
    return elseFunc.call();
  }
}

/// An extension for [List].
extension ListExtension<T> on List<T> {
  /// Returns a new list containing totalCount count of the given list.
  List<T> repeat(int totalCount) {
    if (totalCount <= 1) {
      return this;
    }
    var newList = <T>[];
    for (int i = 0; i < totalCount; i++) {
      for (var item in this) {
        newList.add(item);
      }
    }
    return newList;
  }

  /// Returns a new list with separator build by [builder], between items.
  List<T> separateWithBuilder(T Function(int) builder) {
    if (isEmpty) {
      return <T>[];
    }
    return [
      this[0],
      for (var idx = 1; idx < length; idx++) ...[
        builder(idx - 1),
        this[idx],
      ],
    ];
  }

  /// Returns a new list with separator between items.
  List<T> separate(T separator) {
    return separateWithBuilder((_) => separator);
  }
}
